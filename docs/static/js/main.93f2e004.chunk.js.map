{"version":3,"sources":["reportWebVitals.ts","components/Cell.tsx","components/GameOfLife.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Cell","props","x","y","size","color","state","width","height","fill","stroke","nextArray","index","i","length","GameOfLife","cellsize","rate","React","useState","table","array","push","Math","random","generateState","states","setState","useEffect","id","setInterval","map","_","lives","next","ny","nx","reduce","prev","current","nextState","clearInterval","queries","window","location","search","slice","split","o","kv","key","val","parseInt","parseFloat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93f2e004.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\n\ntype Props = {\n  x: number;\n  y: number;\n  size: number;\n  state: boolean;\n};\n\nfunction Cell(props: Props) {\n  const { x, y, size, state} = props;\n\n  const stroke = '#444';\n  const color = state ? '#EEE' : '#555';\n\n  return (<rect x={x} y={y} width={size} height={size} fill={color} stroke={stroke} />);\n}\nexport { Cell };","import React from 'react';\nimport { Cell } from './Cell';\n\nconst nextArray = [\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1]\n];\n\nfunction index(i: number, length: number) {\n  if (i < 0) {\n    return length - 1;\n  } else if (i >= length) {\n    return 0;\n  }\n  return i;\n}\n\nfunction nextState(states: boolean[][], x: number, y: number) {\n  const state = states[y][x];\n\n  const lives: number = nextArray.map(next => {\n    const ny = index(y + next[1], states.length);\n    const nx = index(x + next[0], states[ny].length);\n    return (states[ny][nx] ? 1 : 0) as number;\n  }).reduce((prev, current) => prev + current);\n  if (lives === 3) {\n    return true;\n  } else if (lives === 2 && state) {\n    return true;\n  }\n  return false;\n}\n\nfunction generateState(width: number, height: number, rate: number) {\n  const table: boolean[][] = [];\n  for (let y = 0; y < height; ++y) {\n    const array: boolean[] = [];\n    for (let x = 0; x < width; ++x) {\n      array.push(Math.random() <= rate ? true : false);\n    }\n    table.push(array);\n  }\n  return table;\n}\n\ntype Props = {\n  width: number;\n  height: number;\n  cellsize: number;\n  rate: number;\n};\n\nfunction GameOfLife(props: Props) {\n  const {\n    width, height,\n    cellsize,\n    rate\n  } = props;\n\n  const [states, setState] = React.useState(generateState(width, height, rate));\n\n  React.useEffect(() => {\n    const id = setInterval(() => {\n      setState(states => {\n        const newState = states.map((array, y) => {\n          return array.map((_, x) => nextState(states, x, y));\n        });\n        return newState;\n      });\n    }, 10);\n    return () => clearInterval(id);\n  }, [states]);\n\n  return (\n    <svg>\n    {\n      states.map((array, y) => {\n        return array.map((state, x) => (\n          <Cell x={x * cellsize} y={y * cellsize} size={cellsize} state={state} /> \n        ))\n      })\n    }\n    </svg>\n  );\n}\nexport { GameOfLife };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { GameOfLife } from './components/GameOfLife';\nimport './index.css';\n\ntype Query = {\n  [key: string] : string;\n};\n\nconst queries = window.location.search.slice(1).split('&').reduce((o, kv) => {\n  const [key, val] = kv.split('=');\n  o[key] = val;\n  return o;\n}, {} as Query);\n\nconst cellsize = parseInt(queries['cellsize'] ?? '7');\nconst width = parseInt(queries['width'] ?? '100');\nconst height = parseInt(queries['height'] ?? '100');\nconst rate = parseFloat(queries['rate'] ?? '0.1');\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameOfLife width={width} height={height} cellsize={cellsize} rate={rate} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}