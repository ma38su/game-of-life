{"version":3,"sources":["reportWebVitals.ts","components/Cell.tsx","components/Row.tsx","components/GameOfLife.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Cell","React","memo","props","x","y","state","handler","type","className","onClick","Row","states","map","nextArray","index","i","length","nextStates","array","_","lives","next","ny","nx","reduce","prev","current","nextState","GameOfLife","width","height","rate","useState","stop","setStop","table","push","Math","random","generateState","setState","handlerClickCell","useCallback","newStates","newRow","useEffect","id","setInterval","prevAry","nextAry","filter","v","opt","clearInterval","handlerStop","value","queries","window","location","search","slice","split","o","kv","key","val","parseInt","parseFloat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f1ee47d.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\n\ntype Props = {\n  x: number;\n  y: number;\n  state: boolean;\n  handler: (x: number, y: number) => void;\n};\n\nconst Cell = React.memo((props: Props) => {\n  const { x, y, state, handler } = props;\n\n  return (\n    <input\n      type='button'\n      className={state ? 'alive' : 'dead'}\n      onClick={() => handler(x, y)} />\n  );\n});\nexport { Cell };","import React from 'react';\nimport { Cell } from './Cell';\n\ntype Props = {\n  y: number;\n  states: boolean[];\n  handler: (x: number, y: number) => void;\n};\n\nconst Row = React.memo((props: Props) => {\n  const {\n    y,\n    states,\n    handler\n  } = props;\n\n  return (\n    <div className='row'>\n    {\n      states.map((state, x) => (\n        <Cell\n          key={x}\n          x={x}\n          y={y}\n          state={state}\n          handler={handler}\n          />\n      ))\n    }\n  </div>);\n});\nexport { Row };","import React from 'react';\nimport { Row } from './Row';\n\nconst nextArray = [\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1]\n];\n\nfunction index(i: number, length: number) {\n  if (i < 0) {\n    return length - 1;\n  } else if (i >= length) {\n    return 0;\n  }\n  return i;\n}\n\nfunction nextState(states: boolean[][], x: number, y: number) {\n  const state = states[y][x];\n\n  const lives: number = nextArray.map(next => {\n    const ny = index(y + next[1], states.length);\n    const nx = index(x + next[0], states[ny].length);\n    return (states[ny][nx] ? 1 : 0) as number;\n  }).reduce((prev, current) => prev + current);\n  if (lives === 3) {\n    return true;\n  } else if (lives === 2 && state) {\n    return true;\n  }\n  return false;\n}\n\nfunction nextStates(states: boolean[][]) {\n  return states.map((array, y) => {\n    return array.map((_, x) => nextState(states, x, y));\n  });\n}\n\nfunction opt(prev: boolean[][], next: boolean[][]) {\n  return prev.map((prevAry, y) => {\n    const nextAry = next[y];\n    if (prevAry.filter((v, x) => v !== nextAry[x])) {\n      return nextAry;\n    } else {\n      return prevAry;\n    }\n  });\n}\n\nfunction generateState(width: number, height: number, rate: number) {\n  const table: boolean[][] = [];\n  for (let y = 0; y < height; ++y) {\n    const array: boolean[] = [];\n    for (let x = 0; x < width; ++x) {\n      array.push(Math.random() <= rate ? true : false);\n    }\n    table.push(array);\n  }\n  return table;\n}\n\ntype Props = {\n  width: number;\n  height: number;\n  rate: number;\n};\n\nfunction GameOfLife(props: Props) {\n  const {\n    width, height,\n    rate\n  } = props;\n\n  const [stop, setStop] = React.useState(true);\n  const [states, setState] = React.useState(generateState(width, height, rate));\n\n  const handlerClickCell = React.useCallback((x, y) => {\n    setState(states => {\n      const newStates = [...states];\n      const newRow = [...newStates[y]];\n      newRow[x] = !newRow[x];\n      newStates[y] = newRow;\n      return newStates;\n    })\n  }, []);\n\n  React.useEffect(() => {\n    if (stop) return;\n    const id = setInterval(() => {\n      setState(states => {\n        const next = nextStates(states);\n        return opt(states, next);\n      });\n    }, 10);\n    return () => clearInterval(id);\n  }, [states, stop]);\n\n  const handlerStop = React.useCallback(() => {\n    setStop(prev => !prev);\n  }, []);\n\n  return (\n    <>\n    <input\n      className='ctrl'\n      type='button'\n      value={stop ? 'Start' : 'Stop'}\n      onClick={handlerStop} />\n    {\n      states.map((array, y) => (\n        <Row\n          key={y}\n          states={array}\n          y={y}\n          handler={handlerClickCell}\n          />\n      ))\n    }\n\n    </>\n  );\n}\nexport { GameOfLife };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { GameOfLife } from './components/GameOfLife';\nimport './index.css';\n\ntype Query = {\n  [key: string] : string;\n};\n\nconst queries = window.location.search.slice(1).split('&').reduce((o, kv) => {\n  const [key, val] = kv.split('=');\n  o[key] = val;\n  return o;\n}, {} as Query);\n\nconst width = parseInt(queries['width'] ?? '100');\nconst height = parseInt(queries['height'] ?? '100');\nconst rate = parseFloat(queries['rate'] ?? '0.1');\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameOfLife width={width} height={height} rate={rate} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}